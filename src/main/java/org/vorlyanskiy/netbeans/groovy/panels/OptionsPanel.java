package org.vorlyanskiy.netbeans.groovy.panels;

import java.io.File;
import java.util.Arrays;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.ListSelectionModel;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.openide.util.NbPreferences;
import org.vorlyanskiy.netbeans.groovy.datamodel.OptionsDataModel;

/**
 *
 * @author Vladimir Orlyanskiy
 */
public class OptionsPanel extends javax.swing.JPanel {
    

    private final OptionsDataModel dataModel;
    private final DefaultListModel dlm;
    private static final String DEFAULT_LIBRARY_FOLDER = "Library folder";
    /**
     * Creates new form OptionsPanel
     */
    public OptionsPanel(OptionsDataModel dataModel) {
        this.dataModel = dataModel;
        dlm = new DefaultListModel();
        dataModel.getClasspathJars()
                .forEach(dlm::addElement);
        initComponents();
        jListJars.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextFieldPathToGroovy = new javax.swing.JTextField();
        jButtonGroovyPathSelection = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListJars = new javax.swing.JList<>();
        jButtonAddJar = new javax.swing.JButton();
        jButtonDeleteJar = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(OptionsPanel.class, "OptionsPanel.jLabel1.text")); // NOI18N
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        jTextFieldPathToGroovy.setText(dataModel.getPathToGroovy());
        jTextFieldPathToGroovy.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldPathToGroovyFocusLost(evt);
            }
        });
        jTextFieldPathToGroovy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPathToGroovyActionPerformed(evt);
            }
        });
        jTextFieldPathToGroovy.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTextFieldPathToGroovyPropertyChange(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButtonGroovyPathSelection, org.openide.util.NbBundle.getMessage(OptionsPanel.class, "OptionsPanel.jButtonGroovyPathSelection.text")); // NOI18N
        jButtonGroovyPathSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGroovyPathSelectionActionPerformed(evt);
            }
        });

        jListJars.setModel(dlm);
        jScrollPane1.setViewportView(jListJars);

        org.openide.awt.Mnemonics.setLocalizedText(jButtonAddJar, org.openide.util.NbBundle.getMessage(OptionsPanel.class, "OptionsPanel.jButton1.text")); // NOI18N
        jButtonAddJar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddJarActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jButtonDeleteJar, org.openide.util.NbBundle.getMessage(OptionsPanel.class, "OptionsPanel.jButtonDeleteJar.text_1")); // NOI18N
        jButtonDeleteJar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteJarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldPathToGroovy, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonGroovyPathSelection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonAddJar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonDeleteJar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextFieldPathToGroovy)
                        .addComponent(jButtonGroovyPathSelection)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(11, 11, 11))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonAddJar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonDeleteJar)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldPathToGroovyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPathToGroovyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPathToGroovyActionPerformed

    private void jTextFieldPathToGroovyFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldPathToGroovyFocusLost
        dataModel.setPathToGroovy(jTextFieldPathToGroovy.getText());
    }//GEN-LAST:event_jTextFieldPathToGroovyFocusLost

    private void jTextFieldPathToGroovyPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTextFieldPathToGroovyPropertyChange
        dataModel.setPathToGroovy(jTextFieldPathToGroovy.getText());
    }//GEN-LAST:event_jTextFieldPathToGroovyPropertyChange

    private void jButtonGroovyPathSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGroovyPathSelectionActionPerformed
        selectGroovyPath();
    }//GEN-LAST:event_jButtonGroovyPathSelectionActionPerformed

    private void jButtonAddJarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddJarActionPerformed
        addJar();
    }//GEN-LAST:event_jButtonAddJarActionPerformed

    private void jButtonDeleteJarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteJarActionPerformed
        excludeJar();
    }//GEN-LAST:event_jButtonDeleteJarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddJar;
    private javax.swing.JButton jButtonDeleteJar;
    private javax.swing.JButton jButtonGroovyPathSelection;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> jListJars;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldPathToGroovy;
    // End of variables declaration//GEN-END:variables

    private void selectGroovyPath() {
        JFileChooser fc = new JFileChooser();
        int result = fc.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            String path = fc.getSelectedFile().getPath();
            dataModel.setPathToGroovy(path);
            jTextFieldPathToGroovy.setText(path);
        }
    }

    private void addJar() {
        JFileChooser fc = initFileChooser();
        int result = fc.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            Arrays.stream(fc.getSelectedFiles())
                    .forEach((File sf) -> {
                        String path = sf.getPath();
                        dlm.addElement(path);
                        dataModel.addJar(path);
                    });
        }
        saveDefaultDirectory(fc.getCurrentDirectory());
    }

    private JFileChooser initFileChooser() {
        JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("JAR files", "jar");
        fc.setAcceptAllFileFilterUsed(false);
        fc.addChoosableFileFilter(filter);
        fc.setMultiSelectionEnabled(true);
        File previousDirectory = getPreviousDirectory();
        if (previousDirectory != null) {
            fc.setCurrentDirectory(previousDirectory);
        }
        return fc;
    }

    private void excludeJar() {
        jListJars.getSelectedValuesList()
                .forEach(selectedValue -> {
                    dlm.removeElement(selectedValue);
                    dataModel.removeJar(selectedValue);
                });
    }

    private File getPreviousDirectory() {
        String folderPath = NbPreferences.forModule(getClass()).get(DEFAULT_LIBRARY_FOLDER, null);
        if (folderPath != null) {
            return new File(folderPath);
        }
        return null;
    }
    
    private void saveDefaultDirectory(File folder) {
        NbPreferences.forModule(getClass()).put(DEFAULT_LIBRARY_FOLDER, folder.getAbsolutePath());
    }
}
